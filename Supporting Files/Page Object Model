Very Basic PAGE OBJECT MODEL in JS


1. Ensure that firstClass can be exported
When creating a class, at the end of it, after closing curly brackets of a class type the following:

            module.exports = new <name of the class>;

2. Create a constructor
Constructor is something that gets automatically executed when instance of a class is created.
Good practice is to place a driver constructor so the driver gets called every time when
instance of a class is instantiated.

            constructor() {
            var driver = new webdriver.Builder().forBrowser('chrome').build();
            }

3. Make sure that the driver will have the ability to be re-used outside
of a scope of constructor. To do this, create a varible outside of constructor instead.

            vad driver;

            constructor() {
            driver = new webdriver.Builder().forBrowser('chrome').build();
            }


============
Final content of the firstClass file

            var webdriver = require('selenium-webdriver');
            var driver;

            class HomePage{

            constructor() {
            driver = new webdriver.Builder().forBrowser('chrome').build();
            }

            navigateToThePage() {
            driver.get('http://www.thetestroom.com/webapp');
            } 

        }
module.exports = new HomePage;
============

4. Create secondClass files that will call firstClass file
Within the new secondClass file, create an object of the firstClass file

            var firstFile = require('./<name of the firstClass file>')


5. Once the object of the firstClass file is created, methods from within
can be called

            var firstFile = require('./<name of the firstClass file>')

            firstFile.navigateToThePage();

6. When secondClass.js will be executed by ~node secondClass.js
it will run the content of the firstClass.js, method navigateToThePage()

============
Using this. method
When the base page is created, the driver normally cannot be shared.
This can be resolved, when we add 'this.' to the driver.
Ths automatically creates a var instance of the driver,
and initialises it.
There no need to instatiate the var driver
outside of constructor method.